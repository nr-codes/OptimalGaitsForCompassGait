(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code::Initialization:: *)
(*
MultiparameterContinuationMethods.nb: An implementation of various continuation methods.
Copyright (C) 2017 Nelson Rosa Jr.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. This program is distributed in the 
hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details. You should have 
received a copy of the GNU General Public License along with this program.
If not, see <http://www.gnu.org/licenses/>.
*)


(* ::Input::Initialization:: *)
BeginPackage["ContinuationMethods`"]

CFKv::usage = "";
CFKz::usage = "";
CFKp::usage = "";
CFKS::usage = "";

Begin["`Private`"]


(* ::Input::Initialization:: *)
CFKv[v_, i_] := Module[{w, n},
(* pivot to the the neighboring simplex across vertex v\[LeftDoubleBracket]i\[RightDoubleBracket] *)
w = v;
n = Length@v-1; (* in R^n: n + 1 vertices *)

If[i < 1 || i > n+1, Throw@$Failed];
w[[i]] = Which[
i == 1, v[[2]]+v[[n+1]]-v[[1]],
i == n+1, v[[n]]+v[[1]]-v[[n+1]],
True, v[[i+1]]+v[[i-1]]-v[[i]]
];
w
];

CFKz[z_, p_, i_] := Module[{n},
(* translate z to its position in the neighbor simplex across vertex v\[LeftDoubleBracket]i\[RightDoubleBracket] *)
n = Length@z; (* in R^n: n translations *)
If[i < 1 || i > n+1, Throw@$Failed];
Which[
i == 1, z + IdentityMatrix[n][[p[[1]]]], 
i == n+1, z - IdentityMatrix[n][[p[[n]]]], 
True, z
]
];

CFKp[p_, i_]  := Module[{w, n},
(* the permutation of the neighboring simplex across vertex v\[LeftDoubleBracket]i\[RightDoubleBracket] *)
n = Length@p; (* in R^n: n labels *)
If[i < 1 || i > n+1, Throw@$Failed];
Which[
i == 1, RotateLeft[p, 1], 
i == n+1, RotateRight[p, 1], 
True,
w = p;
If[i < n, w[[{i, i+1}]] = w[[{i+1, i}]],w[[{n, 1}]] = w[[{1, n}]]];
w
]
];

(*CFKS[v0_, z_, p_, d_]:= Module[{o, f, e, n},
(* all simplices can be encoded using an origin simplex v0 *)
(* and the pair (z, p) to select a specific simplex relative to v0 *)
n = Length@z;
o = v0 + d z; (* origin simplex *)
e = IdentityMatrix[n]\[LeftDoubleBracket]p\[RightDoubleBracket];
f = #1 + d e\[LeftDoubleBracket]#2\[RightDoubleBracket]&;
FoldList[f, o, Range[1, n]]
];*)

CFKS[v0_, z_:Automatic, p_:Automatic, d_:1]:= Module[{o, f, e, n},
(* all simplices can be encoded using an origin simplex v0 *)
(* and the pair (z, p) to select a specific simplex relative to v0 *)
n = Length@v0;

(* origin simplex *)
o = If[z === Automatic, v0, v0 + d z];

(* permutation *)
e = If[p === Automatic, IdentityMatrix[n], IdentityMatrix[n][[p]]];

(* simplex *)
f = #1 + d e[[#2]]&;
FoldList[f, o, Range[1, n]]
];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
