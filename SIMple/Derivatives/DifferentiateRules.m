(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code::Initialization:: *)
(*
RigidBodyDerivatives.nb: High-level functions used to define a rigid body.
Copyright (C) 2016 Nelson Rosa Jr.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. This program is distributed in the 
hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details. You should have 
received a copy of the GNU General Public License along with this program.
If not, see <http://www.gnu.org/licenses/>.
*)


(* ::Input::Initialization:: *)
BeginPackage["Derivatives`"]

FixCommonFunctions::usage = "";

Begin["`Private`"]


(* ::Input::Initialization:: *)
common = {FixFunctionsWithLinearSolve, FixFunctionsWithLeastSquares, FixFunctionsWithOuter, FixFunctionsWithJoin};

FixCommonFunctions[expr_] := Fold[#2[#1]&, expr, common];


(* ::Input::Initialization:: *)
FixFunctionsWithOuter = # /. "***Outer***" -> Outer&;

CreateSymbol[HoldPattern@Outer[Times, y_, z_], d_Integer:0] := Sum[Binomial[d, i]"***Outer***"[Times, CreateSymbol[y, i], CreateSymbol[z, d-i]], {i, 0, d}];

TransformExpression[HoldPattern[Set[x_, Outer[Times, y_, z_]]]] := {TransformExpression[x], \[FormalP][Outer[Times, y, z]][\[FormalR]]}; 


(* ::Input::Initialization:: *)
FixFunctionsWithLeastSquares = #  /. "***LeastSquares***" ->  LeastSquares&;

CreateSymbol[HoldPattern@LeastSquares[A_, b_, x_], d_Integer:0] := CreateSymbol[LinearSolve[A, b, x], d] /. "***LinearSolve***" -> "***LeastSquares***";

TransformExpression[HoldPattern[Set[x_, LeastSquares[A_, b_]]]] := {TransformExpression[x], \[FormalP][LeastSquares[A, b, x]][\[FormalR]]}; 


(* ::Input::Initialization:: *)
FixFunctionsWithLinearSolve = #  /. "***LinearSolve***" ->  LinearSolve&;

CreateSymbol[HoldPattern@LinearSolve[A_, b_, x_], d_Integer:0] := "***LinearSolve***"[A, CreateSymbol[b, d] - Sum[Binomial[d, i]CreateSymbol[A, i].CreateSymbol[x, d-i], {i, d}]]; 

TransformExpression[HoldPattern[Set[x_, LinearSolve[A_, b_]]]] := {TransformExpression[x], \[FormalP][LinearSolve[A, b, x]][\[FormalR]]}; 


(* ::Input::Initialization:: *)
FixFunctionsWithJoin = #  /. "***Join***" ->  Join&;

CreateSymbol[HoldPattern[Join[x__]], d_Integer:0] := "***Join***"@@Thread@Unevaluated@CreateSymbol[{x}, d];

TransformExpression[HoldPattern[Set[x_, Join[y__]]]] := {TransformExpression[x], \[FormalP][Join[y]][\[FormalR]]}; 


(* ::Input::Initialization:: *)
End[]
EndPackage[]
