(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code::Initialization:: *)
(*
RecursiveNewtonEulerAlgorithm.nb: An implementation of the RNEA algorithm
and its derivative.
Copyright (C) 2014 Nelson Rosa Jr.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. This program is distributed in the 
hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details. You should have 
received a copy of the GNU General Public License along with this program.
If not, see <http://www.gnu.org/licenses/>.
*)


(* ::Input::Initialization:: *)
BeginPackage["RigidBodyDynamics`", "GlobalVariables`"]
Begin["`Private`"]


(* ::Input::Initialization:: *)
(* 
user inputs: x;
model data: s, ag, XL, IC, parent, nq, fext0;
modifies: uJ, v, a, f, fext;
output: uJ (non-input forces and torques acting on body i in joint space)
*)

RNEA[] := Module[{vJ, p, mv, mf, Iv, Xext},
(* clear/set spatial variables *)
v = zspat; (* spatial velocity *)
a = zspat; (* spatial acceleration *)
f = zspat; (* spatial force *)
fext = zspat; (* external spatial force *)

vJ = z6;
Xext = XL; (* spatial transform 0 to i *)

(* clear RNEA variables *)
uJ = zq; (* C-space forces *)

(* calc forces due to velocity product terms (Coriolis & centrifugal) and gravity *)
Do[
p = parent[[i]];
vJ = s[[i]] qd[[i]];

If[p == 0,
(* only use relative link velocity *)
v[[i]] = vJ;
a[[i]] = XL[[i]].ag;, 
(* else *)
(* add parent's value *)
v[[i]] = XL[[i]].v[[p]] + vJ;
mv = mxv[v[[i]], vJ];
a[[i]] = XL[[i]].a[[p]] + mv;
Xext[[i]] = XL[[i]].Xext[[p]];
];
a[[i]] = a[[i]] + sdot[[i]] qd[[i]] + s[[i]] qdd[[i]];
Iv = \[DoubleStruckCapitalI][[i]].v[[i]];
mf = mxstarf[v[[i]], Iv];

fext[[i]] = LinearSolve[Xext[[i]]\[Transpose], fext0[[i]]];
f[[i]] = \[DoubleStruckCapitalI][[i]].a[[i]] + mf - fext[[i]];, 
{i, nq}
];

Do[
uJ[[i]] = s[[i]].f[[i]];
p = parent[[i]];
If[p != 0,
f[[p]] = f[[p]] + XL[[i]]\[Transpose].f[[i]];
];, 
{i, nq, 1, -1}
];
];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
